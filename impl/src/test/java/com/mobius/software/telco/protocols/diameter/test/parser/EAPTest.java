package com.mobius.software.telco.protocols.diameter.test.parser;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

import com.mobius.software.telco.protocols.diameter.ApplicationIDs;
import com.mobius.software.telco.protocols.diameter.ResultCodes;
import com.mobius.software.telco.protocols.diameter.commands.DiameterMessage;
import com.mobius.software.telco.protocols.diameter.commands.eap.EAPAnswer;
import com.mobius.software.telco.protocols.diameter.commands.eap.EAPRequest;
import com.mobius.software.telco.protocols.diameter.exceptions.DiameterException;
import com.mobius.software.telco.protocols.diameter.impl.commands.DiameterErrorAnswerImpl;
import com.mobius.software.telco.protocols.diameter.impl.commands.DiameterErrorAnswerWithSessionImpl;
import com.mobius.software.telco.protocols.diameter.impl.commands.eap.EAPRequestImpl;
import com.mobius.software.telco.protocols.diameter.impl.primitives.eap.EAPKeyNameImpl;
import com.mobius.software.telco.protocols.diameter.parser.DiameterParser;
import com.mobius.software.telco.protocols.diameter.primitives.common.AuthRequestTypeEnum;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

public class EAPTest
{
	//this is original
	private ByteBuf eapRequestMessage = Unpooled.wrappedBuffer(new byte[] {0x01, 0x00, 0x01, 0x64, (byte)0x80, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x05, 0x4c, (byte)0xaa, 0x12, 0x40, 0x46, 0x71, 0x6f, (byte)0xf2, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00, 0x00, 0x47, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x36, 0x37, 0x3b, 0x33, 0x38, 0x36, 0x3b, 0x33, 0x34, 0x33, 0x33, 0x36, 0x37, 0x36, 0x35, 0x33, 0x38, 0x3b, 0x34, 0x30, 0x66, 0x62, 0x62, 0x33, 0x62, 0x31, 0x2d, 0x37, 0x38, 0x66, 0x66, 0x2d, 0x34, 0x62, 0x30, 0x35, 0x2d, 0x38, 0x37, 0x35, 0x31, 0x2d, 0x62, 0x66, 0x62, 0x37, 0x32, 0x39, 0x62, 0x33, 0x32, 0x35, 0x37, 0x63, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x05, 
			//Destination-Realm
			0x00, 0x00, 0x01, 0x1b, 0x40, 0x00, 0x00, 0x29, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x13, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x36, 0x37, 0x00, 0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x29, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00,
			//here we should insert Destination-Realm + Auth-Request-Type
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x30, 0x32, 0x34, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x40, 0x6e, 0x61, 0x69, 0x2e, 0x65, 0x70, 0x63, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 0x00, 0x01, (byte)0xce, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x3b, 0x01, 0x30, 0x32, 0x34, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x40, 0x6e, 0x61, 0x69, 0x2e, 0x65, 0x70, 0x63, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00,
			//Auth-Request-Type
			0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03 
	}); 
	
	//this is patched
	private ByteBuf eapRequestMessagePatched = Unpooled.wrappedBuffer(new byte[] {0x01, 0x00, 0x01, 0x64, (byte)0x80, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x05, 0x4c, (byte)0xaa, 0x12, 0x40, 0x46, 0x71, 0x6f, (byte)0xf2, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00, 0x00, 0x47, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x36, 0x37, 0x3b, 0x33, 0x38, 0x36, 0x3b, 0x33, 0x34, 0x33, 0x33, 0x36, 0x37, 0x36, 0x35, 0x33, 0x38, 0x3b, 0x34, 0x30, 0x66, 0x62, 0x62, 0x33, 0x62, 0x31, 0x2d, 0x37, 0x38, 0x66, 0x66, 0x2d, 0x34, 0x62, 0x30, 0x35, 0x2d, 0x38, 0x37, 0x35, 0x31, 0x2d, 0x62, 0x66, 0x62, 0x37, 0x32, 0x39, 0x62, 0x33, 0x32, 0x35, 0x37, 0x63, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x05, 
			0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x13, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x36, 0x37, 0x00, 0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x29, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 
			//Destination-Realm
			0x00, 0x00, 0x01, 0x1b, 0x40, 0x00, 0x00, 0x29, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 
			//Auth-Request-Type
			0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x30, 0x32, 0x34, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x40, 0x6e, 0x61, 0x69, 0x2e, 0x65, 0x70, 0x63, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 0x00, 0x01, (byte)0xce, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x3b, 0x01, 0x30, 0x32, 0x34, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x40, 0x6e, 0x61, 0x69, 0x2e, 0x65, 0x70, 0x63, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00
			 
	}); 
		
	//this is original
	private ByteBuf eapAnswerMessage = Unpooled.wrappedBuffer(new byte[] {0x01, 0x00, 0x01, 0x2c, 0x40, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x05, 0x4c, (byte)0xaa, 0x12, 0x40, 0x46, 0x71, 0x6f, (byte)0xf2, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00, 0x00, 0x47, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x36, 0x37, 0x3b, 0x33, 0x38, 0x36, 0x3b, 0x33, 0x34, 0x33, 0x33, 0x36, 0x37, 0x36, 0x35, 0x33, 0x38, 0x3b, 0x34, 0x30, 0x66, 0x62, 0x62, 0x33, 0x62, 0x31, 0x2d, 0x37, 0x38, 0x66, 0x66, 0x2d, 0x34, 0x62, 0x30, 0x35, 0x2d, 0x38, 0x37, 0x35, 0x31, 0x2d, 0x62, 0x66, 0x62, 0x37, 0x32, 0x39, 0x62, 0x33, 0x32, 0x35, 0x37, 0x63, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x05, 
			//here we should insert result code
			0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x32, 0x73, 0x63, 0x73, 0x63, 0x66, 0x2d, 0x30, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x29, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 
			//Result-Code
			0x00, 0x00, 0x01, 0x0c, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, (byte)0xe9, 
			0x00, 0x00, 0x01, (byte)0xce, 0x00, 0x00, 0x00, 0x4c, 0x01, 0x01, 0x00, 0x44, 0x17, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, (byte)0xa4, (byte)0xcd, 0x19, (byte)0xfe, (byte)0xee, (byte)0xfc, (byte)0xb9, (byte)0xb9, 0x56, 0x5f, 0x29, 0x3d, (byte)0xb7, (byte)0xf0, 0x69, (byte)0xf7, 0x01, 0x05, 0x00, 0x00, 0x3f, (byte)0x9d, (byte)0xf1, (byte)0xbf, (byte)0xbc, 0x0f, (byte)0x97, 0x71, 0x30, (byte)0x9c, (byte)0xf1, 0x01, 0x78, (byte)0xfe, 0x0e, 0x00, 0x0b, 0x05, 0x00, 0x00, (byte)0x99, 0x59, (byte)0xbc, (byte)0xce, (byte)0xc8, (byte)0xba, 0x72, 0x5f, 0x1d, 0x72, 0x28, (byte)0x87, 0x59, (byte)0x92, 0x27, (byte)0xd6, 0x00, 0x00, 0x01, 0x10, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x09
	});

	//this is patched
	private ByteBuf eapAnswerMessagePatched = Unpooled.wrappedBuffer(new byte[] {0x01, 0x00, 0x01, 0x2c, 0x40, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x05, 0x4c, (byte)0xaa, 0x12, 0x40, 0x46, 0x71, 0x6f, (byte)0xf2, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00, 0x00, 0x47, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x36, 0x37, 0x3b, 0x33, 0x38, 0x36, 0x3b, 0x33, 0x34, 0x33, 0x33, 0x36, 0x37, 0x36, 0x35, 0x33, 0x38, 0x3b, 0x34, 0x30, 0x66, 0x62, 0x62, 0x33, 0x62, 0x31, 0x2d, 0x37, 0x38, 0x66, 0x66, 0x2d, 0x34, 0x62, 0x30, 0x35, 0x2d, 0x38, 0x37, 0x35, 0x31, 0x2d, 0x62, 0x66, 0x62, 0x37, 0x32, 0x39, 0x62, 0x33, 0x32, 0x35, 0x37, 0x63, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x05, 
			//Result-Code
			0x00, 0x00, 0x01, 0x0c, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, (byte)0xe9, 
			0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x32, 0x73, 0x63, 0x73, 0x63, 0x66, 0x2d, 0x30, 0x31, 0x2e, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x29, 0x69, 0x6d, 0x73, 0x2e, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x2e, 0x6d, 0x63, 0x63, 0x32, 0x34, 0x30, 0x2e, 0x33, 0x67, 0x70, 0x70, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x01, (byte)0xce, 0x00, 0x00, 0x00, 0x4c, 0x01, 0x01, 0x00, 0x44, 0x17, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, (byte)0xa4, (byte)0xcd, 0x19, (byte)0xfe, (byte)0xee, (byte)0xfc, (byte)0xb9, (byte)0xb9, 0x56, 0x5f, 0x29, 0x3d, (byte)0xb7, (byte)0xf0, 0x69, (byte)0xf7, 0x01, 0x05, 0x00, 0x00, 0x3f, (byte)0x9d, (byte)0xf1, (byte)0xbf, (byte)0xbc, 0x0f, (byte)0x97, 0x71, 0x30, (byte)0x9c, (byte)0xf1, 0x01, 0x78, (byte)0xfe, 0x0e, 0x00, 0x0b, 0x05, 0x00, 0x00, (byte)0x99, 0x59, (byte)0xbc, (byte)0xce, (byte)0xc8, (byte)0xba, 0x72, 0x5f, 0x1d, 0x72, 0x28, (byte)0x87, 0x59, (byte)0x92, 0x27, (byte)0xd6, 0x00, 0x00, 0x01, 0x10, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x09
	});
		
	@Test
	public void testEAP() throws DiameterException
	{		
		DiameterParser diameterParser=new DiameterParser(this.getClass().getClassLoader(), Arrays.asList(new Class<?>[] { DiameterErrorAnswerImpl.class , DiameterErrorAnswerWithSessionImpl.class }),Package.getPackage("com.mobius.software.telco.protocols.diameter.impl.primitives"));
		
		//make sure classes are loaded
		Class<?> clazz = EAPKeyNameImpl.class;
		Class<?> avpClass = EAPRequestImpl.class;
		assertNotNull(clazz);
		assertNotNull(avpClass);
		
		diameterParser.registerApplication(this.getClass().getClassLoader(), Package.getPackage("com.mobius.software.telco.protocols.diameter.impl.commands.eap"));
		
		eapRequestMessage.resetReaderIndex();
		DiameterMessage decodeMessage = diameterParser.decode(eapRequestMessage, false);
		assertNotNull(decodeMessage);
		assertTrue(decodeMessage instanceof EAPRequest);
		EAPRequest eapr = (EAPRequest)decodeMessage;
		assertFalse(eapr.getIsRetransmit());
		assertFalse(eapr.getIsProxyable());
		assertNotNull(eapr.getEndToEndIdentifier());
		assertNotNull(eapr.getHopByHopIdentifier());
		assertEquals(eapr.getEndToEndIdentifier(),new Long(0x46716ff2L));
		assertEquals(eapr.getHopByHopIdentifier(),new Long(0x4caa1240L));
		assertNotNull(eapr.getSessionId());
		assertEquals(eapr.getSessionId(),"10.156.1.67;386;3433676538;40fbb3b1-78ff-4b05-8751-bfb729b3257c");
		assertNotNull(eapr.getAuthApplicationId());
		assertEquals(eapr.getAuthApplicationId(),new Long(ApplicationIDs.EAP));
		assertNotNull(eapr.getDestinationRealm());
		assertEquals(eapr.getDestinationRealm(),"ims.mnc001.mcc240.3gppnetwork.org");
		assertNotNull(eapr.getOriginHost());
		assertEquals(eapr.getOriginHost(),"10.156.1.67");
		assertNotNull(eapr.getOriginRealm());
		assertEquals(eapr.getOriginRealm(),"ims.mnc001.mcc240.3gppnetwork.org");
		assertNotNull(eapr.getUsername());
		assertEquals(eapr.getUsername(),"0240010000000012@nai.epc.mnc001.mcc240.3gppnetwork.org");
		assertNotNull(eapr.getEAPPayload());
		assertEquals(eapr.getEAPPayload().readableBytes(),59);
		assertNotNull(eapr.getAuthRequestType());
		assertEquals(eapr.getAuthRequestType(),AuthRequestTypeEnum.AUTHORIZE_AUTHENTICATE);
		
		ByteBuf encodedMessage = diameterParser.encode(eapr);
		byte[] eapEncodedData = new byte[encodedMessage.readableBytes()];
		encodedMessage.readBytes(eapEncodedData);
		eapRequestMessagePatched.setIndex(0,eapRequestMessagePatched.writerIndex());
		byte[] eapData = new byte[eapRequestMessagePatched.readableBytes()];
		eapRequestMessagePatched.readBytes(eapData);
		assertArrayEquals(eapEncodedData, eapData);
		
		eapAnswerMessage.resetReaderIndex();
		decodeMessage = diameterParser.decode(eapAnswerMessage, false);
		assertNotNull(decodeMessage);
		assertTrue(decodeMessage instanceof EAPAnswer);
		EAPAnswer eapa = (EAPAnswer)decodeMessage;
		assertFalse(eapa.getIsError());
		assertTrue(eapa.getIsProxyable());
		assertFalse(eapa.getIsRetransmit());
		assertNotNull(eapa.getEndToEndIdentifier());
		assertNotNull(eapa.getHopByHopIdentifier());
		assertEquals(eapa.getEndToEndIdentifier(),new Long(0x46716ff2L));
		assertEquals(eapa.getHopByHopIdentifier(),new Long(0x4caa1240L));
		assertNotNull(eapa.getSessionId());
		assertEquals(eapa.getSessionId(),"10.156.1.67;386;3433676538;40fbb3b1-78ff-4b05-8751-bfb729b3257c");
		assertNotNull(eapa.getAuthApplicationId());
		assertEquals(eapa.getAuthApplicationId(),new Long(ApplicationIDs.EAP));
		assertNotNull(eapa.getOriginHost());
		assertEquals(eapa.getOriginHost(),"scscf-01.ims.mnc001.mcc240.3gppnetwork.org");
		assertNotNull(eapa.getOriginRealm());
		assertEquals(eapa.getOriginRealm(),"ims.mnc001.mcc240.3gppnetwork.org");
		assertNotNull(eapa.getResultCode());
		assertEquals(eapa.getResultCode(),new Long(ResultCodes.DIAMETER_MULTI_ROUND_AUTH));
		assertNotNull(eapa.getEAPPayload());
		assertEquals(eapa.getEAPPayload().readableBytes(),68);
		assertNotNull(eapa.getMultiRoundTimeOut());
		assertEquals(eapa.getMultiRoundTimeOut(),new Long(9L));
		
		encodedMessage = diameterParser.encode(eapa);
		byte[] eaaEncodedData = new byte[encodedMessage.readableBytes()];
		encodedMessage.readBytes(eaaEncodedData);
		eapAnswerMessagePatched.setIndex(0,eapAnswerMessagePatched.writerIndex());
		byte[] dwaData = new byte[eapAnswerMessagePatched.readableBytes()];
		eapAnswerMessagePatched.readBytes(dwaData);
		assertArrayEquals(eaaEncodedData, dwaData);
	}
}